#include <iostream> // Подключаем стандартную библиотеку ввода/вывода (iostream) для использования cout и cin

#include <stdexcept> // Подключаем библиотеку для работы с исключениями (stdexcept), необходимую для использования invalid_argument


using namespace std; // Используем пространство имен std, чтобы не писать std:: перед каждым элементом std (cout, cin, endl и т.д.) - не рекомендуется в больших проектах!

long long factorial(int n) { // Объявление функции factorial, которая вычисляет факториал.  Возвращаемое значение long long для обработки больших чисел.
    if (n < 0) { // Проверка: если число n меньше 0 (отрицательное)
        throw invalid_argument("Факториал отрицательного числа не определен"); // Генерируется исключение типа invalid_argument с сообщением об ошибке.
    }
    else if (n == 0) { // Проверка: если число n равно 0
        return 1; // Базовый случай: факториал 0 равен 1
    }
    else { // Если число n положительное
        long long result = 1; // Инициализация переменной result значением 1 (начало вычисления факториала)
        for (int i = 1; i <= n; ++i) { // Цикл for: перебирает числа от 1 до n включительно.
            result *= i; // Умножает текущее значение result на i (вычисление факториала).
        }
        return result; // Возвращается вычисленный факториал.
    }
}

int main() { // Главная функция программы
    int num; // Объявление переменной num типа int для хранения числа, введенного пользователем.
    cout << "Введите неотрицательное целое число: "; // Вывод приглашения пользователю ввести число.
    cin >> num; // Считывание числа, введенного пользователем, и сохранение его в переменной num.

    try { // Блок try:  код внутри этого блока может вызвать исключение.
        long long fact = factorial(num); // Вызов функции factorial для вычисления факториала. Результат сохраняется в переменной fact.
        cout << "Факториал " << num << " равен " << fact << endl; // Вывод результата, если исключение не было вызвано.
    }
    catch (const invalid_argument& e) { // Блок catch для обработки исключения invalid_argument.
        cerr << "Ошибка: " << e.what() << endl; // Вывод сообщения об ошибке, содержащегося в исключении.  cerr используется для вывода ошибок.
    }
    catch (const exception& e) { // Блок catch для обработки любых других исключений.
        cerr << "Произошла неизвестная ошибка: " << e.what() << endl; // Вывод сообщения о неизвестной ошибке.
    }

    return 0; // Возвращение 0 указывает на успешное завершение программы.
}